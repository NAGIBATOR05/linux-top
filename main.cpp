#include "BigNumbers/BigFloat.h"
#include "BigNumbers/BigFloat.cpp"
#include "BigNumbers/BigInteger.h"
#include "BigNumbers/BigInteger.cpp"
#include <iostream>
#include <chrono>

#define all(x) x.begin(), x.end()
void show(BigInteger a) {
    std::string temp;
    temp = a.toString();
    std::cout << temp << std::endl;
}

void show(BigFloat a, int x) {
    std::string temp;
    temp = a.toString(x);
    std::cout << temp << std::endl;
}

BigFloat calculate_pi(int idx) {
    clock_t start, finish;
    start = clock();
    BigFloat Pi("0");
    BigFloat deg_16("1");
    std::string prec = "0.";
    int idx1 = idx;
    while (idx1 > 0) {
        prec += '0';
        --idx1;
    }
    prec += '1';
    BigFloat prc(prec);
    BigFloat res("0");
    BigFloat k("0");
    do  {
        res = (BigFloat("1") / deg_16);
        BigFloat res1 = (BigFloat("4") / (BigFloat("8") * k + BigFloat("1"))) - (BigFloat("2") / (BigFloat("8") * k + BigFloat("4"))) -
                        (BigFloat("1") / (BigFloat("8") * k + BigFloat("5"))) - (BigFloat("1") / (BigFloat("8") * k + BigFloat("6")));
        res = res * res1;
        Pi = Pi + res;
        deg_16 = deg_16 * BigInteger("16");
        k = k + BigFloat("1");
    } while(res > prc);
    finish = clock();
    double duration = (double)(finish - start) / CLOCKS_PER_SEC;
    std::cout<<duration<<std::endl;
    return Pi;
}
int main(){
    show(calculate_pi(100), 100);

    BigFloat r1("3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982080809023469364094928553012740870165106071955063401630981657289723116875472560774998771735993705206214362894505517388761226969723660448931323620894339645177732777544047188241496180054922442894590162566857899438213533561880875325752293877909169452308620235586826918052523235146450408152225046142894175307577191295283049608663870819753697205055579556712927657519020622951037299250732199845673517053701053809421700165677779697952203319942650872521702479792046031750653187207613986126303012921150097705706189971544812507016490390131673515381960542222547590507909751749322462894073998061546460016813633120311397654275602703214177842802065025086889616424363383346070385879128737541751657633895071956309977465999175596657580673560793794198193178030622072228974188373581905337545989286531086022016906573884960978467807671019635868403603472584988632870484718871303110395450214040963645881013201022245280709223313086713356445011880197072334439766872386886593014719023740464370581880302981124406259412058994928603129019105317888388297275398097260787729815994287258376731657964718025405885780975202071616949757343589190576656288976059079066509083397857323009951073676076149359441864155676840449403516384285781145912378639927991264805251400710445364130894816734821862092182087611291763096232898533344268798828125000");
    BigFloat r2("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679");
   BigFloat r3("3.1417123456789");
    BigFloat r4 = "9"_bf;

    //Bigoat222 r5("1000000000000000000000000000000");
    //BigInteger r1("100000");
    //BigInteger r2("100000");
    //BigInteger r3 = r1*r2;
    //r3.change_precision(10);
    //show(r3);
    //r3.delete_leadings_zeroes();
    show(r3, 10);
    return 0;
}